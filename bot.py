import pandas as pd
import ta
import time
import csv
import os
import asyncio
from datetime import datetime
from binance.client import Client
from binance.enums import *
from telegram import Bot
from data import API_KEY, API_SECRET, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TIMEFRAME = '1h'
LIMIT = 100
POSITION_UNIT = 100  # –í USDT
STOP_LOSS_PCT = 0.015  # 2% –°–¢–û–ü –õ–û–°–°
TAKE_PROFIT_PCT = 0.03  # 4% –¢–ï–ô–ö –ü–†–û–§–ò–¢
TRADES_FILE = 'trades.csv'
POSITIONS_FILE = 'positions.csv'
CLOSED_TRADES_FILE = 'closed_trades.csv'
LEVERAGE = 5  # –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ
RISK_PER_TRADE = 0.01  # 1% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
MAX_CONCURRENT_TRADES = 15  # –ú–∞–∫—Å–∏–º—É–º 15 —Å–¥–µ–ª–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
MIN_TRADE_SIZE = 1.2       # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 1 USDT
TRAILING_STOP_CALLBACK = 1.5  # 1.5% –æ—Ç–∫–∞—Ç –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
client = Client(API_KEY, API_SECRET)
bot = Bot(token=TELEGRAM_TOKEN)
loop = asyncio.get_event_loop()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_top_update = 0
top_symbols = []
last_reported_pnl = {}  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è PnL
PNL_CHANGE_THRESHOLD = 5  # –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è PnL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤ USDT)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º
MIN_NOTIONAL_VALUES = {}

async def load_min_notional():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –≤—Å–µ—Ö USDT-–ø–∞—Ä"""
    global MIN_NOTIONAL_VALUES
    try:
        symbols_info = client.futures_exchange_info()['symbols']
        for symbol_info in symbols_info:
            if symbol_info['symbol'].endswith('USDT'):
                min_notional = None
                for f in symbol_info['filters']:
                    if f['filterType'] == 'MIN_NOTIONAL':
                        min_notional = float(f['notional'])
                        break
                if min_notional:
                    MIN_NOTIONAL_VALUES[symbol_info['symbol']] = min_notional
        print("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", MIN_NOTIONAL_VALUES)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤: {e}")


async def send_telegram_message(text):
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)
    except Exception as e:
        print(f"[Telegram Error] {e}")


async def get_top_30_futures_symbols():
    global last_top_update
    try:
        tickers = client.futures_ticker()
        symbols_info = client.futures_exchange_info()['symbols']
        allowed_symbols = {
            s['symbol']
            for s in symbols_info
            if s['contractType'] == 'PERPETUAL' and s['status'] == 'TRADING'
        }

        usdt_pairs = [
            t for t in tickers
            if t['symbol'].endswith('USDT')
            and t['symbol'] not in ['BTCUSDT', 'ETHUSDT']
            and t['symbol'] in allowed_symbols
        ]

        sorted_by_volume = sorted(usdt_pairs, key=lambda x: float(x['quoteVolume']), reverse=True)
        top_symbols = sorted_by_volume[:28]

        message = "\nüìä –¢–æ–ø 28 —Ñ—å—é—á–µ—Ä—Å–æ–≤ –ø–æ –æ–±—ä—ë–º—É (–±–µ–∑ BTC/ETH):\n" + "\n".join([
            f"{i + 1}. {t['symbol']} | –û–±—ä—ë–º: {float(t['quoteVolume']):,.0f}$ | –¶–µ–Ω–∞: {float(t['lastPrice']):.4f}"
            for i, t in enumerate(top_symbols)
        ])
        await send_telegram_message(message)
        last_top_update = time.time()
        return [t['symbol'] for t in top_symbols]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø-30: {e}")
        return []



async def get_futures_balance():
    try:
        balance = next(a for a in client.futures_account_balance() if a['asset'] == 'USDT')
        return float(balance['balance'])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0


def get_ohlcv(symbol):
    try:
        klines = client.futures_klines(symbol=symbol, interval=TIMEFRAME, limit=LIMIT)
        df = pd.DataFrame(klines, columns=[
            'time', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_asset_volume', 'number_of_trades',
            'taker_buy_base', 'taker_buy_quote', 'ignore'
        ])
        df['close'] = df['close'].astype(float)
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        return None

async def process_trade(symbol, signals):
    # –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏:
    positions = client.futures_position_information()
    if any(p['symbol'] == symbol and float(p['positionAmt']) != 0 for p in positions):
        return

### –ù–æ–≤—ã–π –∫–æ–¥!
def log_trade(symbol, position_type, entry_price, stop_loss, take_profit, position_size, signals):
    file_exists = os.path.isfile(TRADES_FILE)
    with open(TRADES_FILE, mode='a', newline='') as file:
        writer = csv.writer(file)
        if not file_exists:
            writer.writerow(
                ['timestamp', 'symbol', 'type', 'entry', 'stop_loss', 'take_profit', 'position_size', 'signals'])
        writer.writerow([
            datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            symbol,
            position_type,
            entry_price,
            stop_loss,
            take_profit,
            position_size,
            "|".join(signals)
        ])

def log_closed_trade(symbol, entry_price, close_price, pnl):
    file_exists = os.path.isfile(CLOSED_TRADES_FILE)
    with open(CLOSED_TRADES_FILE, mode='a', newline='') as file:
        writer = csv.writer(file)
        if not file_exists:
            writer.writerow(['timestamp', 'symbol', 'entry', 'exit', 'pnl'])
        writer.writerow([
            datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            symbol,
            entry_price,
            close_price,
            pnl
        ])


async def report_closed_trades():
    if not os.path.exists(CLOSED_TRADES_FILE) or os.path.getsize(CLOSED_TRADES_FILE) == 0:
        return

    df = pd.read_csv(CLOSED_TRADES_FILE)
    if df.empty:
        return

    total_pnl = df['pnl'].sum()
    last_hour = datetime.now() - pd.Timedelta(hours=6)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    recent_trades = df[df['timestamp'] > last_hour]

    msg = f"üìà –û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º –∑–∞ 6 —á–∞—Å–æ–≤:\n–ó–∞–∫—Ä—ã—Ç–æ: {len(recent_trades)}\n–û–±—â–∏–π PnL: {recent_trades['pnl'].sum():.2f} USDT"
    await send_telegram_message(msg)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º
    for symbol in recent_trades['symbol'].unique():
        if symbol in last_reported_pnl:
            del last_reported_pnl[symbol]  # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è PnL

def analyze(df):
    df = df.copy()
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
    df['ema9'] = ta.trend.EMAIndicator(df['close'], window=9).ema_indicator()
    df['ema21'] = ta.trend.EMAIndicator(df['close'], window=21).ema_indicator()
    bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
    df['bb_lower'] = bb.bollinger_lband()
    df['bb_upper'] = bb.bollinger_hband()
    df['bb_middle'] = bb.bollinger_mavg()
    return df


def get_signals(df):
    signals = []
    last_row = df.iloc[-1]
    prev_row = df.iloc[-2]

    # –õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª—ã
    if last_row['rsi'] < 30:
        signals.append('RSI_LONG')
    if (prev_row['ema9'] < prev_row['ema21']) and (last_row['ema9'] > last_row['ema21']):
        signals.append('EMA_CROSS_LONG')
    if last_row['close'] < last_row['bb_lower']:
        signals.append('BB_LOWER_LONG')

    # –®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª—ã
    if last_row['rsi'] > 70:
        signals.append('RSI_SHORT')
    if (prev_row['ema9'] > prev_row['ema21']) and (last_row['ema9'] < last_row['ema21']):
        signals.append('EMA_CROSS_SHORT')
    if last_row['close'] > last_row['bb_upper']:
        signals.append('BB_UPPER_SHORT')

    return signals


async def execute_trade(symbol, position_type, entry_price, stop_loss, take_profit, position_size_usdt):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
        symbol_info = next(s for s in client.futures_exchange_info()['symbols'] if s['symbol'] == symbol)
        price_precision = symbol_info['pricePrecision']
        qty_precision = symbol_info['quantityPrecision']
        min_qty = float(symbol_info['filters'][1]['minQty'])

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º minNotional
        min_notional = None
        for f in symbol_info['filters']:
            if f['filterType'] == 'MIN_NOTIONAL':
                min_notional = float(f['notional'])
                break

        if not min_notional:
            await send_telegram_message(f"‚ö†Ô∏è –£ –ø–∞—Ä—ã {symbol} –Ω–µ—Ç MIN_NOTIONAL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return False

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        qty = round(max(position_size_usdt, MIN_TRADE_SIZE) / entry_price, qty_precision)

        if qty < min_qty or qty * entry_price < min_notional * 1.01:
            await send_telegram_message(f"‚ùå –û–±—ä—ë–º {qty} —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è {symbol}.")
            return False

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
        client.futures_change_leverage(symbol=symbol, leverage=LEVERAGE)

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        client.futures_create_order(
            symbol=symbol,
            side=SIDE_BUY if position_type == 'LONG' else SIDE_SELL,
            type=ORDER_TYPE_MARKET,
            quantity=qty
        )

        # STOP-LOSS
        client.futures_create_order(
            symbol=symbol,
            side=SIDE_SELL if position_type == 'LONG' else SIDE_BUY,
            type=FUTURE_ORDER_TYPE_STOP_MARKET,
            stopPrice=round(stop_loss, price_precision),
            closePosition='true',
            priceProtect='true'
        )

        # TAKE-PROFIT
        client.futures_create_order(
            symbol=symbol,
            side=SIDE_SELL if position_type == 'LONG' else SIDE_BUY,
            type=FUTURE_ORDER_TYPE_TAKE_PROFIT_MARKET,
            stopPrice=round(take_profit, price_precision),
            closePosition='true',
            priceProtect='true'
        )

        # TRAILING STOP
        activation_price = entry_price * (1.01 if position_type == 'LONG' else 0.99)

        client.futures_create_order(
            symbol=symbol,
            side=SIDE_SELL if position_type == 'LONG' else SIDE_BUY,
            type='TRAILING_STOP_MARKET',
            callbackRate=TRAILING_STOP_CALLBACK,
            activationPrice=round(activation_price, price_precision),
            closePosition='true',
            priceProtect='true'
        )

        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        msg = (f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {position_type} {symbol}\n"
               f"–û–±—ä—ë–º: {qty} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (~{qty * entry_price:.2f} USDT)\n"
               f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.4f}\n"
               f"SL: {stop_loss:.4f} | TP: {take_profit:.4f}\n"
               f"–¢—Ä–µ–π–ª–∏–Ω–≥: {TRAILING_STOP_CALLBACK}%")
        await send_telegram_message(msg)

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º PnL
        last_reported_pnl[symbol] = 0.0
        return True

    except Exception as e:
        await send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
        return False


async def process_trade(symbol, signals):
    df = get_ohlcv(symbol)
    if df is None:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏
    position_type = 'LONG'
    if any(s in signals for s in ['RSI_SHORT', 'EMA_CROSS_SHORT', 'BB_UPPER_SHORT']):
        position_type = 'SHORT'

    # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–¥–µ–ª–∫–∏
    entry_price = df['close'].iloc[-1]

    if position_type == 'LONG':
        stop_loss = entry_price * (1 - STOP_LOSS_PCT)
        take_profit = entry_price * (1 + TAKE_PROFIT_PCT)
    else:
        stop_loss = entry_price * (1 + STOP_LOSS_PCT)
        take_profit = entry_price * (1 - TAKE_PROFIT_PCT)

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 1$ —Å –ø–ª–µ—á–æ–º 5x
    position_size = max(MIN_TRADE_SIZE, 1.0) * LEVERAGE

    # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
    await execute_trade(symbol, position_type, entry_price, stop_loss, take_profit, position_size)


def get_total_pnl():
    if not os.path.exists(CLOSED_TRADES_FILE):
        return 0.0
    df = pd.read_csv(CLOSED_TRADES_FILE)
    if df.empty:
        return 0.0
    return df['pnl'].sum()


def update_equity_log():
    total = get_total_pnl()
    with open("equity.csv", "a", newline="") as f:
        writer = csv.writer(f)
        if f.tell() == 0:
            writer.writerow(["timestamp", "equity"])
        writer.writerow([datetime.now().isoformat(), total])



async def check_positions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö PnL"""
    global last_reported_pnl

    try:
        positions = client.futures_position_information()
        messages = []

        for pos in positions:
            pos_amount = float(pos['positionAmt'])
            symbol = pos['symbol']

            if pos_amount == 0:
                # –ó–∞–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è ‚Äî –ª–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –±—ã–ª–∞
                if symbol in last_reported_pnl:
                    entry_price = float(pos['entryPrice'])
                    close_price = float(pos['markPrice'])
                    pnl = float(pos['unRealizedProfit'])

                    log_closed_trade(symbol, entry_price, close_price, pnl)

                    await send_telegram_message(
                        f"üîî –°–¥–µ–ª–∫–∞ –ø–æ {symbol} –∑–∞–∫—Ä—ã—Ç–∞\n"
                        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.4f}\n"
                        f"–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {close_price:.4f}\n"
                        f"PnL: {pnl:.2f} USDT"
                    )

                    # –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –ª–æ–≥ equity + —Å—É–º–º–∞—Ä–Ω—ã–π PnL
                    update_equity_log()
                    total_pnl = get_total_pnl()
                    await send_telegram_message(
                        f"üìä –û–±—â–∏–π PnL —Å –Ω–∞—á–∞–ª–∞: {total_pnl:.2f} USDT"
                    )

                    del last_reported_pnl[symbol]
                continue

            # –û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
            current_pnl = float(pos['unRealizedProfit'])
            last_pnl = last_reported_pnl.get(symbol, 0)

            if abs(current_pnl - last_pnl) >= PNL_CHANGE_THRESHOLD:
                entry = float(pos['entryPrice'])
                mark_price = float(pos['markPrice'])
                roe = (current_pnl / float(pos['initialMargin'])) * 100

                messages.append(
                    f"üìä {symbol} {'LONG' if pos_amount > 0 else 'SHORT'}\n"
                    f"ŒîPnL: {current_pnl - last_pnl:+.2f} USDT\n"
                    f"–í—Å–µ–≥–æ PnL: {current_pnl:.2f} USDT ({roe:.1f}%)\n"
                    f"–¶–µ–Ω–∞: {mark_price:.4f} (–í—Ö–æ–¥: {entry:.4f})"
                )

                last_reported_pnl[symbol] = current_pnl

        if messages:
            await send_telegram_message("\n\n".join(messages))

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {str(e)}"
        logging.error(error_msg)
        await send_telegram_message(error_msg)


async def main():
    global top_symbols

    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await send_telegram_message("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø-30
    top_symbols = await get_top_30_futures_symbols()

    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = client.futures_position_information()
            active_positions = sum(1 for p in positions if float(p['positionAmt']) != 0)

            if active_positions < MAX_CONCURRENT_TRADES:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                if time.time() - last_top_update > 6 * 3600:
                    top_symbols = await get_top_30_futures_symbols()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                for symbol in top_symbols:
                    df = get_ohlcv(symbol)
                    if df is None:
                        continue

                    signals = get_signals(analyze(df))
                    if not signals:
                        continue

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
                    if any(p['symbol'] == symbol and float(p['positionAmt']) != 0 for p in positions):
                        continue

                    # –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞
                    await process_trade(symbol, signals)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            await check_positions()
            await report_closed_trades()
            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç

        except Exception as e:
            error_msg = f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            print(error_msg)
            await send_telegram_message(error_msg)
            await asyncio.sleep(60)


if __name__ == '__main__':
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        loop.run_until_complete(send_telegram_message("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é"))
    except Exception as e:
        error_msg = f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)
        loop.run_until_complete(send_telegram_message(error_msg))